{"version":3,"file":"static/js/888.e01a8526.chunk.js","mappings":"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","sources":["components/Cast/Cast.jsx","webpack://react-homework-template/./src/components/MovieDetails/MovieDetails.module.css?9ca9","components/MovieDetails/MovieDetails.jsx","components/Reviews/Reviews.jsx","data/Api.jsx","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getMovieCredits } from 'data/Api';\n\nfunction Cast({ movieId }) {\n  const [cast, setCast] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      const data = await getMovieCredits(movieId);\n      setCast(data.cast);\n    };\n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Cast</h2>\n      <ul>\n        {cast.map(actor => (\n          <li key={actor.id}>\n            <img\n              src={`https://image.tmdb.org/t/p/w200/${actor.profile_path}`}\n              alt={''}\n            />\n            <p>{actor.name}</p>\n            <p>{actor.character}</p>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nCast.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\n\nexport default Cast;\n","// extracted by mini-css-extract-plugin\nexport default {\"MovieDetailsPage\":\"MovieDetails_MovieDetailsPage__yhCHb\",\"MovieDetailsNavLink\":\"MovieDetails_MovieDetailsNavLink__PF4eg\",\"MovieDetailsLink\":\"MovieDetails_MovieDetailsLink__XCAMI\",\"ButtonBack\":\"MovieDetails_ButtonBack__B3TPC\"};","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link, useParams, useLocation } from 'react-router-dom';\nimport css from '../MovieDetails/MovieDetails.module.css';\nimport { getMovieDetails } from 'data/Api';\nimport Cast from '../Cast/Cast';\nimport Reviews from '../Reviews/Reviews';\n\nfunction MovieDetails() {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState(null);\n  const [showCast, setShowCast] = useState(false);\n  const [showReviews, setShowReviews] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      const data = await getMovieDetails(movieId);\n      setMovie(data);\n    };\n    fetchMovieDetails();\n  }, [movieId]);\n\n  const toggleCast = () => setShowCast(!showCast);\n  const toggleReviews = () => setShowReviews(!showReviews);\n  const location = useLocation();\n\n  if (!movie) return <div>Loading...</div>;\n\n  const {\n    title,\n    overview,\n    release_date: releaseDate,\n    poster_path: posterPath,\n    genres,\n    runtime,\n    vote_average: voteAverage,\n  } = movie;\n\n  return (\n    <div className={css.MovieDetailsPage}>\n      <Link className={css.ButtonBack} to={location.state}>\n        Back\n      </Link>\n      <h1>{title}</h1>\n      <img src={`https://image.tmdb.org/t/p/w500${posterPath}`} alt={title} />\n      <p>{overview}</p>\n      <p>Release date: {releaseDate}</p>\n      <p>Genres: {genres.map(genre => genre.name).join(', ')}</p>\n      <p>Runtime: {runtime} minutes</p>\n      <p>Vote average: {voteAverage}</p>\n      <nav>\n        <ul className={css.MovieDetailsNavLink}>\n          <li>\n            <Link\n              className={css.MovieDetailsLink}\n              to={`/movies/${movieId}/cast`}\n              onClick={toggleCast}\n            >\n              Cast\n            </Link>\n          </li>\n          <li>\n            <Link\n              className={css.MovieDetailsLink}\n              to={`/movies/${movieId}/reviews`}\n              onClick={toggleReviews}\n            >\n              Reviews\n            </Link>\n          </li>\n        </ul>\n      </nav>\n      {showCast && <Cast movieId={movieId} />}\n      {showReviews && <Reviews movieId={movieId} />}\n    </div>\n  );\n}\n\nMovieDetails.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\n\nexport default MovieDetails;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { getMovieReviews } from 'data/Api';\n\nfunction Reviews({ movieId }) {\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchReviews = async () => {\n      const data = await getMovieReviews(movieId);\n      setReviews(data.results);\n    };\n    fetchReviews();\n  }, [movieId]);\n\n  return (\n    <div>\n      <h2>Reviews:</h2>\n      {reviews.length > 0 ? (\n        <ul>\n          {reviews.map(review => (\n            <li key={review.id}>\n              <h3>{review.author}</h3>\n              <p>{review.content}</p>\n            </li>\n          ))}\n        </ul>\n      ) : (\n        <p>No reviews available.</p>\n      )}\n    </div>\n  );\n}\n\nReviews.propTypes = {\n  movieId: PropTypes.number.isRequired,\n};\n\nexport default Reviews;\n","const API_KEY = '996f90502411052111a97ebd41f1eb4e';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getTrendingMovies = async () => {\n  const response = await fetch(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  const data = await response.json();\n  return data;\n};\n\nexport const searchMovies = async query => {\n  const response = await fetch(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  const data = await response.json();\n  return data;\n};\n\nexport const getMovieDetails = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}?api_key=${API_KEY}`\n  );\n  const data = await response.json();\n  return data;\n};\n\nexport const getMovieCredits = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  const data = await response.json();\n  return data;\n};\n\nexport const getMovieReviews = async movieId => {\n  const response = await fetch(\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  const data = await response.json();\n  return data;\n};\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["movieId","useState","cast","setCast","useEffect","fetchCast","getMovieCredits","data","map","actor","src","profile_path","alt","name","character","id","useParams","movie","setMovie","showCast","setShowCast","showReviews","setShowReviews","fetchMovieDetails","getMovieDetails","location","useLocation","title","overview","releaseDate","release_date","posterPath","poster_path","genres","runtime","voteAverage","vote_average","className","css","to","state","genre","join","onClick","Cast","Reviews","reviews","setReviews","fetchReviews","getMovieReviews","results","length","review","author","content","API_KEY","BASE_URL","getTrendingMovies","fetch","response","json","searchMovies","query","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}